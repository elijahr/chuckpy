/* This file was generated by PyBindGen 0.0.0.0 */
#define PY_SSIZE_T_CLEAN
#include <Python.h>
#include <stddef.h>


#if PY_VERSION_HEX >= 0x03000000
#if PY_VERSION_HEX >= 0x03050000
typedef PyAsyncMethods* cmpfunc;
#else
typedef void* cmpfunc;
#endif
#define PyCObject_FromVoidPtr(a, b) PyCapsule_New(a, NULL, b)
#define PyCObject_AsVoidPtr(a) PyCapsule_GetPointer(a, NULL)
#define PyString_FromString(a) PyBytes_FromString(a)
#define Py_TPFLAGS_CHECKTYPES 0 /* this flag doesn't exist in python 3 */
#endif


#if     __GNUC__ > 2
# define PYBINDGEN_UNUSED(param) param __attribute__((__unused__))
#elif     __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ > 4)
# define PYBINDGEN_UNUSED(param) __attribute__((__unused__)) param
#else
# define PYBINDGEN_UNUSED(param) param
#endif  /* !__GNUC__ */

#ifndef _PyBindGenWrapperFlags_defined_
#define _PyBindGenWrapperFlags_defined_
typedef enum _PyBindGenWrapperFlags {
   PYBINDGEN_WRAPPER_FLAG_NONE = 0,
   PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED = (1<<0),
} PyBindGenWrapperFlags;
#endif


#include <stdio.h>
#include <numpy/arrayobject.h>
#include "chuck_def.h"
#include "RtAudio.h"
#include "chuck_audio.h"
#include "chuck.h"
#include "chuck_vm.h"
#include "chuck_carrier.h"
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    Chuck_Carrier *obj;
    PyBindGenWrapperFlags flags:8;
} PyChuck_Carrier;


extern PyTypeObject PyChuck_Carrier_Type;


typedef struct {
    PyObject_HEAD
    Chuck_Object *obj;
    PyBindGenWrapperFlags flags:8;
} PyChuck_Object;


extern PyTypeObject PyChuck_Object_Type;


typedef struct {
    PyObject_HEAD
    Chuck_VM *obj;
    PyBindGenWrapperFlags flags:8;
} PyChuck_VM;


extern PyTypeObject PyChuck_VM_Type;


typedef struct {
    PyObject_HEAD
    ChucK *obj;
    PyBindGenWrapperFlags flags:8;
} PyChucK;


extern PyTypeObject PyChucK_Type;


typedef struct {
    PyObject_HEAD
    RtAudio *obj;
    PyBindGenWrapperFlags flags:8;
} PyRtAudio;


extern PyTypeObject PyRtAudio_Type;


typedef struct {
    PyObject_HEAD
    ChuckAudio *obj;
    PyBindGenWrapperFlags flags:8;
} PyChuckAudio;


extern PyTypeObject PyChuckAudio_Type;
extern PyTypeObject PyChuckAudioMeta_Type;


typedef struct {
    PyObject_HEAD
    std::list<std::string> *obj;
} Pystd__list__lt__std__string__gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt__std__string__gt__ *container;
    std::list<std::string>::iterator *iterator;
} Pystd__list__lt__std__string__gt__Iter;


extern PyTypeObject Pystd__list__lt__std__string__gt___Type;
extern PyTypeObject Pystd__list__lt__std__string__gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___std__string___gt__(PyObject *arg, std::list<std::string> *container);

            PyObject* samples_to_numpy_array(SAMPLE * samples, t_CKUINT count, t_CKUINT shape);
            SAMPLE* numpy_array_to_samples(PyObject * npy_samples);

            // Wrapper for f_audio_cb which calls a Python function
            void _wrap_f_audio_cb(
                SAMPLE * input,
                SAMPLE * output,
                t_CKUINT num_frames,
                t_CKUINT num_in_chans,
                t_CKUINT num_out_chans,
                void * py_cb
            );
            static void log_obj(PyObject * o);


int _wrap_convert_py2c__std__string(PyObject *value, std::string *address);

/* --- module functions --- */


PyObject *
_wrap__chuck_set_error_message_log_level(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    t_CKUINT level;
    const char *keywords[] = {"level", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "k", (char **) keywords, &level)) {
        return NULL;
    }
    EM_setlog(level);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap__chuck_set_error_message_log_level(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap__chuck_mtof(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    double f;
    const char *keywords[] = {"f", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &f)) {
        return NULL;
    }
    retval = mtof(f);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}
PyObject * _wrap__chuck_mtof(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap__chuck_ftom(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    double f;
    const char *keywords[] = {"f", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &f)) {
        return NULL;
    }
    retval = ftom(f);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}
PyObject * _wrap__chuck_ftom(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap__chuck_powtodb(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    double f;
    const char *keywords[] = {"f", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &f)) {
        return NULL;
    }
    retval = powtodb(f);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}
PyObject * _wrap__chuck_powtodb(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap__chuck_rmstodb(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    double f;
    const char *keywords[] = {"f", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &f)) {
        return NULL;
    }
    retval = rmstodb(f);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}
PyObject * _wrap__chuck_rmstodb(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap__chuck_dbtopow(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    double f;
    const char *keywords[] = {"f", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &f)) {
        return NULL;
    }
    retval = dbtopow(f);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}
PyObject * _wrap__chuck_dbtopow(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap__chuck_dbtorms(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    double f;
    const char *keywords[] = {"f", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &f)) {
        return NULL;
    }
    retval = dbtorms(f);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}
PyObject * _wrap__chuck_dbtorms(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap__chuck_nextpow2(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned long retval;
    unsigned long i;
    const char *keywords[] = {"i", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "k", (char **) keywords, &i)) {
        return NULL;
    }
    retval = nextpow2(i);
    py_retval = Py_BuildValue((char *) "k", retval);
    return py_retval;
}
PyObject * _wrap__chuck_nextpow2(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap__chuck_ensurepow2(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned long retval;
    unsigned long i;
    const char *keywords[] = {"i", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "k", (char **) keywords, &i)) {
        return NULL;
    }
    retval = ensurepow2(i);
    py_retval = Py_BuildValue((char *) "k", retval);
    return py_retval;
}
PyObject * _wrap__chuck_ensurepow2(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);

static PyMethodDef _chuck_functions[] = {
    {(char *) "set_error_message_log_level", (PyCFunction) _wrap__chuck_set_error_message_log_level, METH_KEYWORDS|METH_VARARGS, "set_error_message_log_level(level)\n\ntype: level: t_CKUINT" },
    {(char *) "mtof", (PyCFunction) _wrap__chuck_mtof, METH_KEYWORDS|METH_VARARGS, "mtof(f)\n\ntype: f: double" },
    {(char *) "ftom", (PyCFunction) _wrap__chuck_ftom, METH_KEYWORDS|METH_VARARGS, "ftom(f)\n\ntype: f: double" },
    {(char *) "powtodb", (PyCFunction) _wrap__chuck_powtodb, METH_KEYWORDS|METH_VARARGS, "powtodb(f)\n\ntype: f: double" },
    {(char *) "rmstodb", (PyCFunction) _wrap__chuck_rmstodb, METH_KEYWORDS|METH_VARARGS, "rmstodb(f)\n\ntype: f: double" },
    {(char *) "dbtopow", (PyCFunction) _wrap__chuck_dbtopow, METH_KEYWORDS|METH_VARARGS, "dbtopow(f)\n\ntype: f: double" },
    {(char *) "dbtorms", (PyCFunction) _wrap__chuck_dbtorms, METH_KEYWORDS|METH_VARARGS, "dbtorms(f)\n\ntype: f: double" },
    {(char *) "nextpow2", (PyCFunction) _wrap__chuck_nextpow2, METH_KEYWORDS|METH_VARARGS, "nextpow2(i)\n\ntype: i: unsigned long" },
    {(char *) "ensurepow2", (PyCFunction) _wrap__chuck_ensurepow2, METH_KEYWORDS|METH_VARARGS, "ensurepow2(i)\n\ntype: i: unsigned long" },
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */




static int
_wrap_PyChuck_Carrier__tp_init__0(PyChuck_Carrier *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new Chuck_Carrier();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyChuck_Carrier__tp_init__1(PyChuck_Carrier *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyChuck_Carrier *ctor_arg;
    const char *keywords[] = {"ctor_arg", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyChuck_Carrier_Type, &ctor_arg)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new Chuck_Carrier(*((PyChuck_Carrier *) ctor_arg)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyChuck_Carrier__tp_init__2(PyChuck_Carrier *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new Chuck_Carrier();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyChuck_Carrier__tp_init(PyChuck_Carrier *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyChuck_Carrier__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyChuck_Carrier__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyChuck_Carrier__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyChuck_Carrier__copy__(PyChuck_Carrier *self)
{

    PyChuck_Carrier *py_copy;
    py_copy = PyObject_New(PyChuck_Carrier, &PyChuck_Carrier_Type);
    py_copy->obj = new Chuck_Carrier(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return (PyObject*) py_copy;
}

static PyMethodDef PyChuck_Carrier_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyChuck_Carrier__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyChuck_Carrier__tp_dealloc(PyChuck_Carrier *self)
{
        Chuck_Carrier *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

PyTypeObject PyChuck_Carrier_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "_chuck.Chuck_Carrier",            /* tp_name */
    sizeof(PyChuck_Carrier),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyChuck_Carrier__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL,
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "ChuckCarrier(ctor_arg)\nChuckCarrier()\nChuckCarrier()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyChuck_Carrier_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyChuck_Carrier__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyChuck_Object__tp_init__0(PyChuck_Object *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new Chuck_Object();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyChuck_Object__tp_init__1(PyChuck_Object *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyChuck_Object *ctor_arg;
    const char *keywords[] = {"ctor_arg", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyChuck_Object_Type, &ctor_arg)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new Chuck_Object(*((PyChuck_Object *) ctor_arg)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyChuck_Object__tp_init__2(PyChuck_Object *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new Chuck_Object();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyChuck_Object__tp_init(PyChuck_Object *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyChuck_Object__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyChuck_Object__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyChuck_Object__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyChuck_Object__copy__(PyChuck_Object *self)
{

    PyChuck_Object *py_copy;
    py_copy = PyObject_New(PyChuck_Object, &PyChuck_Object_Type);
    py_copy->obj = new Chuck_Object(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return (PyObject*) py_copy;
}

static PyMethodDef PyChuck_Object_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyChuck_Object__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyChuck_Object__tp_dealloc(PyChuck_Object *self)
{
        Chuck_Object *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

PyTypeObject PyChuck_Object_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "_chuck.Chuck_Object",            /* tp_name */
    sizeof(PyChuck_Object),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyChuck_Object__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL,
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "ChuckObject(ctor_arg)\nChuckObject()\nChuckObject()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyChuck_Object_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyChuck_Object__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyChuck_VM__tp_init__0(PyChuck_VM *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new Chuck_VM();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyChuck_VM__tp_init__1(PyChuck_VM *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyChuck_VM *ctor_arg;
    const char *keywords[] = {"ctor_arg", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyChuck_VM_Type, &ctor_arg)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new Chuck_VM(*((PyChuck_VM *) ctor_arg)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyChuck_VM__tp_init__2(PyChuck_VM *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new Chuck_VM();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyChuck_VM__tp_init(PyChuck_VM *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyChuck_VM__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyChuck_VM__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyChuck_VM__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyChuck_VM_initialize(PyChuck_VM *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    t_CKBOOL retval;
    t_CKUINT srate;
    t_CKUINT doc_chan;
    t_CKUINT adc_chan;
    t_CKUINT adaptive;
    t_CKBOOL halt;
    const char *keywords[] = {"srate", "doc_chan", "adc_chan", "adaptive", "halt", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "kkkkk", (char **) keywords, &srate, &doc_chan, &adc_chan, &adaptive, &halt)) {
        return NULL;
    }
    retval = self->obj->initialize(srate, doc_chan, adc_chan, adaptive, halt);
    py_retval = Py_BuildValue((char *) "k", retval);
    return py_retval;
}


PyObject *
_wrap_PyChuck_VM_initialize_synthesis(PyChuck_VM *self)
{
    PyObject *py_retval;
    t_CKBOOL retval;

    retval = self->obj->initialize_synthesis();
    py_retval = Py_BuildValue((char *) "k", retval);
    return py_retval;
}


PyObject *
_wrap_PyChuck_VM_set_carrier(PyChuck_VM *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    t_CKBOOL retval;
    PyChuck_Carrier *c;
    Chuck_Carrier *c_ptr;
    const char *keywords[] = {"c", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyChuck_Carrier_Type, &c)) {
        return NULL;
    }
    c_ptr = (c ? c->obj : NULL);
    retval = self->obj->setCarrier(c_ptr);
    py_retval = Py_BuildValue((char *) "k", retval);
    return py_retval;
}


PyObject *
_wrap_PyChuck_VM_shutdown(PyChuck_VM *self)
{
    PyObject *py_retval;
    t_CKBOOL retval;

    retval = self->obj->shutdown();
    py_retval = Py_BuildValue((char *) "k", retval);
    return py_retval;
}


PyObject *
_wrap_PyChuck_VM_has_init(PyChuck_VM *self)
{
    PyObject *py_retval;
    t_CKBOOL retval;

    retval = self->obj->has_init();
    py_retval = Py_BuildValue((char *) "k", retval);
    return py_retval;
}


PyObject *
_wrap_PyChuck_VM_start(PyChuck_VM *self)
{
    PyObject *py_retval;
    t_CKBOOL retval;

    retval = self->obj->start();
    py_retval = Py_BuildValue((char *) "k", retval);
    return py_retval;
}


PyObject *
_wrap_PyChuck_VM_stop(PyChuck_VM *self)
{
    PyObject *py_retval;
    t_CKBOOL retval;

    retval = self->obj->stop();
    py_retval = Py_BuildValue((char *) "k", retval);
    return py_retval;
}


static PyObject*
_wrap_PyChuck_VM__copy__(PyChuck_VM *self)
{

    PyChuck_VM *py_copy;
    py_copy = PyObject_New(PyChuck_VM, &PyChuck_VM_Type);
    py_copy->obj = new Chuck_VM(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return (PyObject*) py_copy;
}

static PyMethodDef PyChuck_VM_methods[] = {
    {(char *) "initialize", (PyCFunction) _wrap_PyChuck_VM_initialize, METH_KEYWORDS|METH_VARARGS, "initialize(srate, doc_chan, adc_chan, adaptive, halt)\n\ntype: srate: t_CKUINT\ntype: doc_chan: t_CKUINT\ntype: adc_chan: t_CKUINT\ntype: adaptive: t_CKUINT\ntype: halt: t_CKBOOL" },
    {(char *) "initialize_synthesis", (PyCFunction) _wrap_PyChuck_VM_initialize_synthesis, METH_NOARGS, "initialize_synthesis()\n\n" },
    {(char *) "set_carrier", (PyCFunction) _wrap_PyChuck_VM_set_carrier, METH_KEYWORDS|METH_VARARGS, "set_carrier(c)\n\ntype: c: Chuck_Carrier *" },
    {(char *) "shutdown", (PyCFunction) _wrap_PyChuck_VM_shutdown, METH_NOARGS, "shutdown()\n\n" },
    {(char *) "has_init", (PyCFunction) _wrap_PyChuck_VM_has_init, METH_NOARGS, "has_init()\n\n" },
    {(char *) "start", (PyCFunction) _wrap_PyChuck_VM_start, METH_NOARGS, "start()\n\n" },
    {(char *) "stop", (PyCFunction) _wrap_PyChuck_VM_stop, METH_NOARGS, "stop()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyChuck_VM__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyChuck_VM__tp_dealloc(PyChuck_VM *self)
{
        Chuck_VM *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

PyTypeObject PyChuck_VM_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "_chuck.Chuck_VM",            /* tp_name */
    sizeof(PyChuck_VM),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyChuck_VM__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL,
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "ChuckVM(ctor_arg)\nChuckVM()\nChuckVM()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyChuck_VM_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyChuck_VM__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyChucK__tp_init(PyChucK *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    self->obj = new ChucK();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}



PyObject *
_wrap_PyChucK_set_param__0(PyChucK *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    bool retval;
    const char *name = NULL;
    Py_ssize_t name_len;
    std::string name_std;
    t_CKINT value;
    const char *keywords[] = {"name", "value", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#l", (char **) keywords, &name, &name_len, &value)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    name_std = std::string(name, name_len);
    retval = self->obj->setParam(name_std, value);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyChucK_set_param__1(PyChucK *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    bool retval;
    const char *name = NULL;
    Py_ssize_t name_len;
    std::string name_std;
    const char *value = NULL;
    Py_ssize_t value_len;
    std::string value_std;
    const char *keywords[] = {"name", "value", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#s#", (char **) keywords, &name, &name_len, &value, &value_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    name_std = std::string(name, name_len);
    value_std = std::string(value, value_len);
    retval = self->obj->setParam(name_std, value_std);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyChucK_set_param__2(PyChucK *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    bool retval;
    const char *name = NULL;
    Py_ssize_t name_len;
    std::string name_std;
    std::list<std::string> value_value;
    const char *keywords[] = {"name", "value", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O&", (char **) keywords, &name, &name_len, _wrap_convert_py2c__std__list__lt___std__string___gt__, &value_value)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    name_std = std::string(name, name_len);
    retval = self->obj->setParam(name_std, value_value);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject * _wrap_PyChucK_set_param(PyChucK *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyChucK_set_param__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyChucK_set_param__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyChucK_set_param__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyChucK_set_param_float(PyChucK *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    const char *name = NULL;
    Py_ssize_t name_len;
    std::string name_std;
    t_CKFLOAT value;
    const char *keywords[] = {"name", "value", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#d", (char **) keywords, &name, &name_len, &value)) {
        return NULL;
    }
    name_std = std::string(name, name_len);
    retval = self->obj->setParamFloat(name_std, value);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyChucK_get_param_int(PyChucK *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    t_CKINT retval;
    const char *key = NULL;
    Py_ssize_t key_len;
    std::string key_std;
    const char *keywords[] = {"key", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &key, &key_len)) {
        return NULL;
    }
    key_std = std::string(key, key_len);
    retval = self->obj->getParamInt(key_std);
    py_retval = Py_BuildValue((char *) "l", retval);
    return py_retval;
}


PyObject *
_wrap_PyChucK_get_param_float(PyChucK *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    t_CKFLOAT retval;
    const char *key = NULL;
    Py_ssize_t key_len;
    std::string key_std;
    const char *keywords[] = {"key", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &key, &key_len)) {
        return NULL;
    }
    key_std = std::string(key, key_len);
    retval = self->obj->getParamFloat(key_std);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyChucK_get_param_string(PyChucK *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::string retval;
    const char *key = NULL;
    Py_ssize_t key_len;
    std::string key_std;
    const char *keywords[] = {"key", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &key, &key_len)) {
        return NULL;
    }
    key_std = std::string(key, key_len);
    retval = self->obj->getParamString(key_std);
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyChucK_get_param_string_list(PyChucK *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *key = NULL;
    Py_ssize_t key_len;
    std::string key_std;
    const char *keywords[] = {"key", NULL};
    std::list< std::string > retval;
    Pystd__list__lt__std__string__gt__ *py_std__list__lt__std__string__gt__;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &key, &key_len)) {
        return NULL;
    }
    key_std = std::string(key, key_len);
    retval = self->obj->getParamStringList(key_std);
    py_std__list__lt__std__string__gt__ = PyObject_New(Pystd__list__lt__std__string__gt__, &Pystd__list__lt__std__string__gt___Type);
    py_std__list__lt__std__string__gt__->obj = new std::list<std::string>(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__list__lt__std__string__gt__);
    return py_retval;
}


PyObject *
_wrap_PyChucK_compile_file(PyChucK *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    const char *path = NULL;
    Py_ssize_t path_len;
    std::string path_std;
    const char *argsTogether = NULL;
    Py_ssize_t argsTogether_len;
    std::string argsTogether_std;
    int count;
    const char *keywords[] = {"path", "argsTogether", "count", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#s#i", (char **) keywords, &path, &path_len, &argsTogether, &argsTogether_len, &count)) {
        return NULL;
    }
    path_std = std::string(path, path_len);
    argsTogether_std = std::string(argsTogether, argsTogether_len);
    retval = self->obj->compileFile(path_std, argsTogether_std, count);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyChucK_compile_code(PyChucK *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    const char *code = NULL;
    Py_ssize_t code_len;
    std::string code_std;
    const char *argsTogether = NULL;
    Py_ssize_t argsTogether_len;
    std::string argsTogether_std;
    int count;
    const char *keywords[] = {"code", "argsTogether", "count", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#s#i", (char **) keywords, &code, &code_len, &argsTogether, &argsTogether_len, &count)) {
        return NULL;
    }
    code_std = std::string(code, code_len);
    argsTogether_std = std::string(argsTogether, argsTogether_len);
    retval = self->obj->compileCode(code_std, argsTogether_std, count);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyChucK_init(PyChucK *self)
{
    PyObject *py_retval;
    bool retval;

    retval = self->obj->init();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyChucK_start(PyChucK *self)
{
    PyObject *py_retval;
    bool retval;

    retval = self->obj->start();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}




        PyObject * _wrap_PyChucK_run__inner(
            PyChucK *self,
            PyObject *args,
            PyObject *kwargs,
            PyObject **return_exception
        )
        {
            PyObject* input_numpy_array;
            PyObject* output_numpy_array;
            int numFrames;
            const char *keywords[] = {"input", "output", "numFrames", NULL};
            if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "OOi", (char **) keywords, &input_numpy_array, &output_numpy_array, &numFrames)) {
                PyObject *exc_type, *traceback;
                PyErr_Fetch(&exc_type, return_exception, &traceback);
                Py_XDECREF(exc_type);
                Py_XDECREF(traceback);
                return NULL;
            }
            SAMPLE * input = numpy_array_to_samples(input_numpy_array);
            SAMPLE * output = numpy_array_to_samples(output_numpy_array);

            Py_XINCREF(input_numpy_array);
            Py_XINCREF(output_numpy_array);

            //PyArray_UpdateFlags((PyArrayObject *)input_numpy_array, NPY_ARRAY_OWNDATA);
            //PyArray_UpdateFlags((PyArrayObject *)output_numpy_array, NPY_ARRAY_OWNDATA);

            self->obj->run(input, output, numFrames);

            Py_INCREF(Py_None);
            return Py_None;
        }


PyObject * _wrap_PyChucK_run(PyChucK *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[1] = {0,};
    retval = _wrap_PyChucK_run__inner(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    error_list = PyList_New(1);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyChucK_running__0(PyChucK *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    bool retval;
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->running();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyChucK_running__1(PyChucK *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    bool retval;
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->running();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject * _wrap_PyChucK_running(PyChucK *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyChucK_running__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyChucK_running__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyChucK_vm(PyChucK *self)
{
    PyObject *py_retval;
    Chuck_VM *retval;
    PyChuck_VM *py_Chuck_VM;

    retval = self->obj->vm();
    if (!(retval)) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    py_Chuck_VM = PyObject_New(PyChuck_VM, &PyChuck_VM_Type);
    py_Chuck_VM->obj = retval;
    py_Chuck_VM->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_retval = Py_BuildValue((char *) "N", py_Chuck_VM);
    return py_retval;
}


PyObject *
_wrap_PyChucK_set_log_level(PyChucK *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    t_CKINT level;
    const char *keywords[] = {"level", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "l", (char **) keywords, &level)) {
        return NULL;
    }
    self->obj->setLogLevel(level);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyChucK_methods[] = {
    {(char *) "set_param", (PyCFunction) _wrap_PyChucK_set_param, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "set_param_float", (PyCFunction) _wrap_PyChucK_set_param_float, METH_KEYWORDS|METH_VARARGS, "set_param_float(name, value)\n\ntype: name: std::string const &\ntype: value: t_CKFLOAT" },
    {(char *) "get_param_int", (PyCFunction) _wrap_PyChucK_get_param_int, METH_KEYWORDS|METH_VARARGS, "get_param_int(key)\n\ntype: key: std::string const &" },
    {(char *) "get_param_float", (PyCFunction) _wrap_PyChucK_get_param_float, METH_KEYWORDS|METH_VARARGS, "get_param_float(key)\n\ntype: key: std::string const &" },
    {(char *) "get_param_string", (PyCFunction) _wrap_PyChucK_get_param_string, METH_KEYWORDS|METH_VARARGS, "get_param_string(key)\n\ntype: key: std::string const &" },
    {(char *) "get_param_string_list", (PyCFunction) _wrap_PyChucK_get_param_string_list, METH_KEYWORDS|METH_VARARGS, "get_param_string_list(key)\n\ntype: key: std::string const &" },
    {(char *) "compile_file", (PyCFunction) _wrap_PyChucK_compile_file, METH_KEYWORDS|METH_VARARGS, "compile_file(path, argsTogether, count)\n\ntype: path: std::string const &\ntype: argsTogether: std::string const &\ntype: count: int" },
    {(char *) "compile_code", (PyCFunction) _wrap_PyChucK_compile_code, METH_KEYWORDS|METH_VARARGS, "compile_code(code, argsTogether, count)\n\ntype: code: std::string const &\ntype: argsTogether: std::string const &\ntype: count: int" },
    {(char *) "init", (PyCFunction) _wrap_PyChucK_init, METH_NOARGS, "init()\n\n" },
    {(char *) "start", (PyCFunction) _wrap_PyChucK_start, METH_NOARGS, "start()\n\n" },
    {(char *) "run", (PyCFunction) _wrap_PyChucK_run, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "running", (PyCFunction) _wrap_PyChucK_running, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "vm", (PyCFunction) _wrap_PyChucK_vm, METH_NOARGS, "vm()\n\n" },
    {(char *) "set_log_level", (PyCFunction) _wrap_PyChucK_set_log_level, METH_KEYWORDS|METH_VARARGS, "set_log_level(level)\n\ntype: level: t_CKINT" },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyChucK__tp_dealloc(PyChucK *self)
{
        ChucK *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

PyTypeObject PyChucK_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "_chuck.ChucK",            /* tp_name */
    sizeof(PyChucK),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyChucK__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL,
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "Chuck()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyChucK_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyChucK__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyRtAudio__tp_init(PyRtAudio *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    self->obj = new RtAudio();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static PyMethodDef PyRtAudio_methods[] = {
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyRtAudio__tp_dealloc(PyRtAudio *self)
{
        RtAudio *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

PyTypeObject PyRtAudio_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "_chuck.RtAudio",            /* tp_name */
    sizeof(PyRtAudio),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyRtAudio__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL,
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "RtAudio()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyRtAudio_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyRtAudio__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



static PyObject* _wrap_PyChuckAudio__get_m_dac_n(PyObject * PYBINDGEN_UNUSED(obj), void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "k", ChuckAudio::m_dac_n);
    return py_retval;
}
static int _wrap_PyChuckAudio__set_m_dac_n(PyChuckAudio * PYBINDGEN_UNUSED(dummy), PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "k", &ChuckAudio::m_dac_n)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyChuckAudio__get_m_adc_n(PyObject * PYBINDGEN_UNUSED(obj), void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "k", ChuckAudio::m_adc_n);
    return py_retval;
}
static int _wrap_PyChuckAudio__set_m_adc_n(PyChuckAudio * PYBINDGEN_UNUSED(dummy), PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "k", &ChuckAudio::m_adc_n)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef ChuckAudioMeta__getsets[] = {
    {
        (char*) "m_dac_n", /* attribute name */
        (getter) _wrap_PyChuckAudio__get_m_dac_n, /* C function to get the attribute */
        (setter) _wrap_PyChuckAudio__set_m_dac_n, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_adc_n", /* attribute name */
        (getter) _wrap_PyChuckAudio__get_m_adc_n, /* C function to get the attribute */
        (setter) _wrap_PyChuckAudio__set_m_adc_n, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};

PyTypeObject PyChuckAudioMeta_Type = {
        PyVarObject_HEAD_INIT(NULL, 0)
	(char *) "ChuckAudioMeta",		        /* tp_name */
	0,					/* tp_basicsize */
	0,					/* tp_itemsize */
	0,	 				/* tp_dealloc */
	0,					/* tp_print */
	0,					/* tp_getattr */
	0,					/* tp_setattr */
	0,					/* tp_compare */
	0,					/* tp_repr */
	0,					/* tp_as_number */
	0,					/* tp_as_sequence */
	0,		       			/* tp_as_mapping */
	0,					/* tp_hash */
	0,					/* tp_call */
	0,					/* tp_str */
	0,					/* tp_getattro */
	0,					/* tp_setattro */
	0,					/* tp_as_buffer */
	Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_BASETYPE, /* tp_flags */
 	0,					/* tp_doc */
	0,					/* tp_traverse */
 	0,					/* tp_clear */
	0,					/* tp_richcompare */
	0,					/* tp_weaklistoffset */
	0,					/* tp_iter */
	0,					/* tp_iternext */
	0,					/* tp_methods */
	0,					/* tp_members */
	ChuckAudioMeta__getsets,				/* tp_getset */
	0,					/* tp_base */
	0,					/* tp_dict */
	0,	                                /* tp_descr_get */
	0,  		                        /* tp_descr_set */
	0,					/* tp_dictoffset */
	0,					/* tp_init */
	0,					/* tp_alloc */
	0,					/* tp_new */
	0,               			/* tp_free */
        0,                                      /* tp_is_gc */
        0,                                      /* tp_bases */
        0,                                      /* tp_mro */
        0,                                      /* tp_cache */
        0,                                      /* tp_subclasses */
        0,                                      /* tp_weaklist */
        0                                       /* tp_del */
};


static int
_wrap_PyChuckAudio__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'ChuckAudio' cannot be constructed ()");
    return -1;
}


PyObject *
_wrap_PyChuckAudio_initialize(PyChuckAudio *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    t_CKBOOL retval;
    t_CKUINT num_dac_channels;
    t_CKUINT num_adc_channels;
    t_CKUINT sample_rate;
    t_CKUINT buffer_size;
    t_CKUINT num_buffers;
    PyObject *callback;
    t_CKBOOL force_srate;
    const char *keywords[] = {"num_dac_channels", "num_adc_channels", "sample_rate", "buffer_size", "num_buffers", "callback", "force_srate", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "kkkkkOk", (char **) keywords, &num_dac_channels, &num_adc_channels, &sample_rate, &buffer_size, &num_buffers, &callback, &force_srate)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "f_audio_cb parameter must be callable");
        return NULL;
    }
    Py_XINCREF(callback);
    retval = ChuckAudio::initialize(num_dac_channels, num_adc_channels, sample_rate, buffer_size, num_buffers, _wrap_f_audio_cb, (void*)callback, force_srate);
    py_retval = Py_BuildValue((char *) "k", retval);
    return py_retval;
}


PyObject *
_wrap_PyChuckAudio_shutdown(void)
{
    PyObject *py_retval;

    ChuckAudio::shutdown();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyChuckAudio_start(void)
{
    PyObject *py_retval;
    t_CKBOOL retval;

    retval = ChuckAudio::start();
    py_retval = Py_BuildValue((char *) "k", retval);
    return py_retval;
}


PyObject *
_wrap_PyChuckAudio_stop(void)
{
    PyObject *py_retval;
    t_CKBOOL retval;

    retval = ChuckAudio::stop();
    py_retval = Py_BuildValue((char *) "k", retval);
    return py_retval;
}


PyObject *
_wrap_PyChuckAudio_watchdog_start(void)
{
    PyObject *py_retval;
    t_CKBOOL retval;

    retval = ChuckAudio::watchdog_start();
    py_retval = Py_BuildValue((char *) "k", retval);
    return py_retval;
}


PyObject *
_wrap_PyChuckAudio_watchdog_stop(void)
{
    PyObject *py_retval;
    t_CKBOOL retval;

    retval = ChuckAudio::watchdog_stop();
    py_retval = Py_BuildValue((char *) "k", retval);
    return py_retval;
}


PyObject *
_wrap_PyChuckAudio_probe(void)
{
    PyObject *py_retval;

    ChuckAudio::probe();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyChuckAudio_get_sample_rate(void)
{
    PyObject *py_retval;
    t_CKUINT retval;

    retval = ChuckAudio::srate();
    py_retval = Py_BuildValue((char *) "k", retval);
    return py_retval;
}


PyObject *
_wrap_PyChuckAudio_get_num_channels_out(void)
{
    PyObject *py_retval;
    t_CKUINT retval;

    retval = ChuckAudio::num_channels_out();
    py_retval = Py_BuildValue((char *) "k", retval);
    return py_retval;
}


PyObject *
_wrap_PyChuckAudio_get_num_channels_in(void)
{
    PyObject *py_retval;
    t_CKUINT retval;

    retval = ChuckAudio::num_channels_in();
    py_retval = Py_BuildValue((char *) "k", retval);
    return py_retval;
}


PyObject *
_wrap_PyChuckAudio_get_dac_num(void)
{
    PyObject *py_retval;
    t_CKUINT retval;

    retval = ChuckAudio::dac_num();
    py_retval = Py_BuildValue((char *) "k", retval);
    return py_retval;
}


PyObject *
_wrap_PyChuckAudio_get_adc_num(void)
{
    PyObject *py_retval;
    t_CKUINT retval;

    retval = ChuckAudio::adc_num();
    py_retval = Py_BuildValue((char *) "k", retval);
    return py_retval;
}


PyObject *
_wrap_PyChuckAudio_get_buffer_size(void)
{
    PyObject *py_retval;
    t_CKUINT retval;

    retval = ChuckAudio::buffer_size();
    py_retval = Py_BuildValue((char *) "k", retval);
    return py_retval;
}


PyObject *
_wrap_PyChuckAudio_get_num_buffers(void)
{
    PyObject *py_retval;
    t_CKUINT retval;

    retval = ChuckAudio::num_buffers();
    py_retval = Py_BuildValue((char *) "k", retval);
    return py_retval;
}


PyObject *
_wrap_PyChuckAudio_get_rt_audio(void)
{
    PyObject *py_retval;
    RtAudio *retval;
    PyRtAudio *py_RtAudio;

    retval = ChuckAudio::audio();
    if (!(retval)) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    py_RtAudio = PyObject_New(PyRtAudio, &PyRtAudio_Type);
    py_RtAudio->obj = retval;
    py_RtAudio->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_retval = Py_BuildValue((char *) "N", py_RtAudio);
    return py_retval;
}


PyObject *
_wrap_PyChuckAudio_set_extern(PyChuckAudio *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    SAMPLE in;
    SAMPLE out;
    const char *keywords[] = {"in", "out", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "ff", (char **) keywords, &in, &out)) {
        return NULL;
    }
    ChuckAudio::set_extern(&in, &out);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyChuckAudio_cb(PyChuckAudio *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int retval;
    SAMPLE output_buffer;
    SAMPLE input_buffer;
    unsigned int buffer_size;
    double streamTime;
    unsigned int status;
    PyObject *user_data;
    const char *keywords[] = {"output_buffer", "input_buffer", "buffer_size", "streamTime", "status", "user_data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "ffIdIO", (char **) keywords, &output_buffer, &input_buffer, &buffer_size, &streamTime, &status, &user_data)) {
        return NULL;
    }
    retval = ChuckAudio::cb(&output_buffer, &input_buffer, buffer_size, streamTime, status, user_data);
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

static PyMethodDef PyChuckAudio_methods[] = {
    {(char *) "initialize", (PyCFunction) _wrap_PyChuckAudio_initialize, METH_KEYWORDS|METH_VARARGS|METH_STATIC, "initialize(num_dac_channels, num_adc_channels, sample_rate, buffer_size, num_buffers, callback, force_srate)\n\ntype: num_dac_channels: t_CKUINT\ntype: num_adc_channels: t_CKUINT\ntype: sample_rate: t_CKUINT\ntype: buffer_size: t_CKUINT\ntype: num_buffers: t_CKUINT\ntype: callback: f_audio_cb\ntype: force_srate: t_CKBOOL" },
    {(char *) "shutdown", (PyCFunction) _wrap_PyChuckAudio_shutdown, METH_NOARGS|METH_STATIC, "shutdown()\n\n" },
    {(char *) "start", (PyCFunction) _wrap_PyChuckAudio_start, METH_NOARGS|METH_STATIC, "start()\n\n" },
    {(char *) "stop", (PyCFunction) _wrap_PyChuckAudio_stop, METH_NOARGS|METH_STATIC, "stop()\n\n" },
    {(char *) "watchdog_start", (PyCFunction) _wrap_PyChuckAudio_watchdog_start, METH_NOARGS|METH_STATIC, "watchdog_start()\n\n" },
    {(char *) "watchdog_stop", (PyCFunction) _wrap_PyChuckAudio_watchdog_stop, METH_NOARGS|METH_STATIC, "watchdog_stop()\n\n" },
    {(char *) "probe", (PyCFunction) _wrap_PyChuckAudio_probe, METH_NOARGS|METH_STATIC, "probe()\n\n" },
    {(char *) "get_sample_rate", (PyCFunction) _wrap_PyChuckAudio_get_sample_rate, METH_NOARGS|METH_STATIC, "get_sample_rate()\n\n" },
    {(char *) "get_num_channels_out", (PyCFunction) _wrap_PyChuckAudio_get_num_channels_out, METH_NOARGS|METH_STATIC, "get_num_channels_out()\n\n" },
    {(char *) "get_num_channels_in", (PyCFunction) _wrap_PyChuckAudio_get_num_channels_in, METH_NOARGS|METH_STATIC, "get_num_channels_in()\n\n" },
    {(char *) "get_dac_num", (PyCFunction) _wrap_PyChuckAudio_get_dac_num, METH_NOARGS|METH_STATIC, "get_dac_num()\n\n" },
    {(char *) "get_adc_num", (PyCFunction) _wrap_PyChuckAudio_get_adc_num, METH_NOARGS|METH_STATIC, "get_adc_num()\n\n" },
    {(char *) "get_buffer_size", (PyCFunction) _wrap_PyChuckAudio_get_buffer_size, METH_NOARGS|METH_STATIC, "get_buffer_size()\n\n" },
    {(char *) "get_num_buffers", (PyCFunction) _wrap_PyChuckAudio_get_num_buffers, METH_NOARGS|METH_STATIC, "get_num_buffers()\n\n" },
    {(char *) "get_rt_audio", (PyCFunction) _wrap_PyChuckAudio_get_rt_audio, METH_NOARGS|METH_STATIC, "get_rt_audio()\n\n" },
    {(char *) "set_extern", (PyCFunction) _wrap_PyChuckAudio_set_extern, METH_KEYWORDS|METH_VARARGS|METH_STATIC, "set_extern(in, out)\n\ntype: in: SAMPLE *\ntype: out: SAMPLE *" },
    {(char *) "cb", (PyCFunction) _wrap_PyChuckAudio_cb, METH_KEYWORDS|METH_VARARGS|METH_STATIC, "cb(output_buffer, input_buffer, buffer_size, streamTime, status, user_data)\n\ntype: output_buffer: SAMPLE *\ntype: input_buffer: SAMPLE *\ntype: buffer_size: unsigned int\ntype: streamTime: double\ntype: status: RtAudioStreamStatus\ntype: user_data: PyObject *" },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyChuckAudio__tp_dealloc(PyChuckAudio *self)
{

    Py_TYPE(self)->tp_free((PyObject*)self);
}

PyTypeObject PyChuckAudio_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "_chuck.ChuckAudio",            /* tp_name */
    sizeof(PyChuckAudio),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyChuckAudio__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL,
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyChuckAudio_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyChuckAudio__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


/* --- containers --- */



static void
Pystd__list__lt__std__string__gt__Iter__tp_clear(Pystd__list__lt__std__string__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__list__lt__std__string__gt__Iter__tp_traverse(Pystd__list__lt__std__string__gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__list__lt__std__string__gt____tp_dealloc(Pystd__list__lt__std__string__gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__list__lt__std__string__gt__Iter__tp_dealloc(Pystd__list__lt__std__string__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__list__lt__std__string__gt____tp_iter(Pystd__list__lt__std__string__gt__ *self)
{
    Pystd__list__lt__std__string__gt__Iter *iter = PyObject_GC_New(Pystd__list__lt__std__string__gt__Iter, &Pystd__list__lt__std__string__gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::list<std::string>::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__list__lt__std__string__gt__Iter__tp_iter(Pystd__list__lt__std__string__gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__list__lt__std__string__gt__Iter__tp_iternext(Pystd__list__lt__std__string__gt__Iter *self)
{
    PyObject *py_retval;
    std::list<std::string>::iterator iter;

    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_retval = Py_BuildValue((char *) "s#", ((*iter)).c_str(), ((*iter)).size());
    return py_retval;
}

int _wrap_convert_py2c__std__string(PyObject *value, std::string *address)
{
    PyObject *py_retval;
    const char *retval_ptr;
    Py_ssize_t retval_len;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "s#", &retval_ptr, &retval_len)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = std::string(retval_ptr, retval_len);
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__list__lt___std__string___gt__(PyObject *arg, std::list<std::string> *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__list__lt__std__string__gt___Type)) {
        *container = *((Pystd__list__lt__std__string__gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            std::string item;
            if (!_wrap_convert_py2c__std__string(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__list__lt__std__string__gt__ instance, or a list of std::string");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__list__lt__std__string__gt____tp_init(Pystd__list__lt__std__string__gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::list<std::string>;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__list__lt___std__string___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__list__lt__std__string__gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "_chuck.Std__list__lt__std__string__gt__",            /* tp_name */
    sizeof(Pystd__list__lt__std__string__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__list__lt__std__string__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL,
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__list__lt__std__string__gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__list__lt__std__string__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__list__lt__std__string__gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "_chuck.Std__list__lt__std__string__gt__Iter",            /* tp_name */
    sizeof(Pystd__list__lt__std__string__gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__list__lt__std__string__gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL,
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__list__lt__std__string__gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__list__lt__std__string__gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__list__lt__std__string__gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__list__lt__std__string__gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



            PyObject* samples_to_numpy_array(SAMPLE * samples, t_CKUINT num_frames, t_CKUINT num_channels) {
                npy_intp dims[num_frames];
                for (int i=0; i<num_frames; i++) {
                     dims[i] = num_channels;
                }
                PyObject* npy_samples = PyArray_SimpleNewFromData(num_channels, dims, NPY_DOUBLE, samples);
                return npy_samples;
            }

            SAMPLE* numpy_array_to_samples(PyObject * npy_samples) {
                SAMPLE * samples = (SAMPLE *)PyArray_DATA(npy_samples);
                //npy_intp * dims = PyArray_DIMS(npy_samples);
                //npy_int num_channels = dims[0];
                //npy_int num_frames = dims[1];
                return samples;
            }

            // Wrapper for f_audio_cb which calls a Python function
            void _wrap_f_audio_cb(
                SAMPLE * input,
                SAMPLE * output,
                t_CKUINT num_frames,
                t_CKUINT num_in_chans,
                t_CKUINT num_out_chans,
                void * py_cb
            )
            {
                // acquire the GIL prior to running the callback
                PyGILState_STATE gil_state = PyGILState_Ensure();
                PyObject* input_numpy_array = samples_to_numpy_array(input, num_frames, num_in_chans);
                PyObject* output_numpy_array = samples_to_numpy_array(output, num_frames, num_out_chans);

                //PyArray_UpdateFlags((PyArrayObject *)input_numpy_array, NPY_ARRAY_OWNDATA);
                Py_XINCREF(input_numpy_array);
                //PyArray_UpdateFlags((PyArrayObject *)output_numpy_array, NPY_ARRAY_OWNDATA);
                Py_XINCREF(output_numpy_array);

                PyObject *callback = (PyObject*) py_cb;
                //log_obj(callback);
                PyObject *args = Py_BuildValue("(OOkkk)", input_numpy_array, output_numpy_array, num_frames, num_in_chans, num_out_chans);

                PyEval_CallObject(callback, args);

                Py_XDECREF(input_numpy_array);
                Py_XDECREF(output_numpy_array);
                Py_XDECREF(args);
                PyGILState_Release(gil_state);
            }

            static void log_obj(PyObject * o)
            {
                static PyObject *repr = NULL;

                // build msg-string
                repr = PyObject_Repr(o);

                const char* string = PyUnicode_AsUTF8(repr);
                EM_log( CK_LOG_CORE, string );

                Py_DECREF(repr);
            }


#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef _chuck_moduledef = {
    PyModuleDef_HEAD_INIT,
    "_chuck",
    NULL,
    -1,
    _chuck_functions,
};
#endif


#if PY_VERSION_HEX >= 0x03000000
    #define MOD_ERROR NULL
    #define MOD_INIT(name) PyObject* PyInit_##name(void)
    #define MOD_RETURN(val) val
#else
    #define MOD_ERROR
    #define MOD_INIT(name) void init##name(void)
    #define MOD_RETURN(val)
#endif
#if defined(__cplusplus)
extern "C"
#endif
#if defined(__GNUC__) && __GNUC__ >= 4
__attribute__ ((visibility("default")))
#endif


MOD_INIT(_chuck)
{
    PyObject *m;
    import_array();
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&_chuck_moduledef);
    #else
    m = Py_InitModule3((char *) "_chuck", _chuck_functions, NULL);
    #endif
    if (m == NULL) {
        return MOD_ERROR;
    }
    /* Register the 'Chuck_Carrier' class */
    if (PyType_Ready(&PyChuck_Carrier_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "ChuckCarrier", (PyObject *) &PyChuck_Carrier_Type);
    /* Register the 'Chuck_Object' class */
    if (PyType_Ready(&PyChuck_Object_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "ChuckObject", (PyObject *) &PyChuck_Object_Type);
    /* Register the 'Chuck_VM' class */
    PyChuck_VM_Type.tp_base = &PyChuck_Object_Type;
    if (PyType_Ready(&PyChuck_VM_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "ChuckVM", (PyObject *) &PyChuck_VM_Type);
    /* Register the 'ChucK' class */
    if (PyType_Ready(&PyChucK_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Chuck", (PyObject *) &PyChucK_Type);
    /* Register the 'RtAudio' class */
    if (PyType_Ready(&PyRtAudio_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "RtAudio", (PyObject *) &PyRtAudio_Type);
    /* Register the 'ChuckAudio' class */

    PyChuckAudioMeta_Type.tp_base = Py_TYPE(&PyBaseObject_Type);
    /* Some fields need to be manually inheritted from the parent metaclass */
    PyChuckAudioMeta_Type.tp_traverse = Py_TYPE(&PyBaseObject_Type)->tp_traverse;
    PyChuckAudioMeta_Type.tp_clear = Py_TYPE(&PyBaseObject_Type)->tp_clear;
    PyChuckAudioMeta_Type.tp_is_gc = Py_TYPE(&PyBaseObject_Type)->tp_is_gc;
    /* PyType tp_setattro is too restrictive */
    PyChuckAudioMeta_Type.tp_setattro = PyObject_GenericSetAttr;
    PyType_Ready(&PyChuckAudioMeta_Type);

    Py_TYPE(&PyChuckAudio_Type) = &PyChuckAudioMeta_Type;
    if (PyType_Ready(&PyChuckAudio_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "chuck_audio", (PyObject *) &PyChuckAudio_Type);
    /* Register the 'std::list<std::string>' class */
    if (PyType_Ready(&Pystd__list__lt__std__string__gt___Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pystd__list__lt__std__string__gt__Iter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Std__list__lt__std__string__gt__", (PyObject *) &Pystd__list__lt__std__string__gt___Type);
    PyModule_AddObject(m, (char *) "Std__list__lt__std__string__gt__Iter", (PyObject *) &Pystd__list__lt__std__string__gt__Iter_Type);
    return MOD_RETURN(m);
}
